// Generated by CoffeeScript 1.9.3
var Terminal, TerminalContainer, keyEventUtils,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

keyEventUtils = require("../utils/key-event-utils");

Terminal = require("./Terminal");

TerminalContainer = (function(superClass) {
  extend(TerminalContainer, superClass);

  function TerminalContainer() {
    this.onKeyPress = bind(this.onKeyPress, this);
    this.onKeyDown = bind(this.onKeyDown, this);
    return TerminalContainer.__super__.constructor.apply(this, arguments);
  }

  TerminalContainer.prototype.componentWillMount = function() {
    return this.state = this.props.initialState;
  };

  TerminalContainer.prototype.componentDidMount = function() {
    document.addEventListener("keydown", this.onKeyDown);
    return document.addEventListener("keypress", this.onKeyPress);
  };

  TerminalContainer.prototype.componentWillUnmount = function() {
    document.removeEventListener("keydown", this.onKeyDown);
    return document.removeEventListener("keypress", this.onKeyPress);
  };

  TerminalContainer.prototype.onKeyDown = function(event) {
    var cursorPosition, history, input, ref;
    ref = keyEventUtils.reduceKeyDown(this.state.input, this.state.cursorPosition, this.state.prompt, this.state.history, event), input = ref[0], cursorPosition = ref[1], history = ref[2];
    return this.setState({
      input: input,
      cursorPosition: cursorPosition,
      history: history
    });
  };

  TerminalContainer.prototype.onKeyPress = function(event) {
    var cursorPosition, input, ref;
    ref = keyEventUtils.reduceKeyPress(this.state.input, this.state.cursorPosition, event), input = ref[0], cursorPosition = ref[1];
    return this.setState({
      input: input,
      cursorPosition: cursorPosition
    });
  };

  TerminalContainer.prototype.render = function() {
    return React.createElement(Terminal, React.__spread({}, this.state));
  };

  return TerminalContainer;

})(React.Component);

module.exports = TerminalContainer;
