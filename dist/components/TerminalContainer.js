// Generated by CoffeeScript 1.9.3
var Terminal, TerminalContainer, inputReducers,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

inputReducers = require("../data/input-reducers");

Terminal = require("./Terminal");

TerminalContainer = (function(superClass) {
  extend(TerminalContainer, superClass);

  function TerminalContainer() {
    this.keyHandler = bind(this.keyHandler, this);
    return TerminalContainer.__super__.constructor.apply(this, arguments);
  }

  TerminalContainer.prototype.componentWillMount = function() {
    this.state = {
      recording: false,
      playing: false,
      lines: [],
      history: [],
      input: "",
      cursorPosition: 0,
      recordStartTime: null,
      buffer: [],
      prompt: ">> ",
      historyScrollOffset: 0
    };
    if (this.props.initialState) {
      return _.assign(this.state, this.props.initialState);
    }
  };

  TerminalContainer.prototype.componentDidMount = function() {
    document.addEventListener("keydown", this.keyHandler);
    document.addEventListener("keypress", this.keyHandler);
    if (this.state.buffer.length) {
      return this.buffer();
    }
  };

  TerminalContainer.prototype.componentWillUnmount = function() {
    document.removeEventListener("keydown", this.keyHandler);
    return document.removeEventListener("keypress", this.keyHandler);
  };

  TerminalContainer.prototype.keyHandler = function(event) {
    var state, updates;
    if (event.ctrlKey && event.keyCode === 67) {
      this.bufferCanceled = true;
    }
    if (!this.state.playing) {
      updates = inputReducers.reduceKey(this.state, event);
      if (updates) {
        event.preventDefault();
        state = _.assign({}, this.state, updates);
        return this.setState(state);
      }
    }
  };

  TerminalContainer.prototype.shouldComponentUpdate = function(prevState, nextState) {
    return prevState !== nextState;
  };

  TerminalContainer.prototype.componentDidUpdate = function() {
    return this.buffer();
  };

  TerminalContainer.prototype.buffer = function() {
    if (this.state.buffer.length) {
      return inputReducers.reduceBuffer(this.state).then((function(_this) {
        return function(nextState) {
          if (!_this.bufferCanceled) {
            return _this.setState(nextState);
          } else {
            _this.bufferCanceled = false;
            nextState = inputReducers.clearBuffer(_this.state);
            console.log("cleared buffer: ", nextState.lines);
            return _this.setState(nextState);
          }
        };
      })(this))["catch"]((function(_this) {
        return function(err) {
          console.error(err);
          return _this.setState(inputReducers.reduceError(_this.state, err));
        };
      })(this));
    } else {
      if (this.state.playing) {
        return this.setState(_.assign({}, {
          playing: false
        }));
      }
    }
  };

  TerminalContainer.prototype.render = function() {
    window.state = this.state;
    return React.createElement(Terminal, React.__spread({}, this.state));
  };

  return TerminalContainer;

})(React.Component);

module.exports = TerminalContainer;
